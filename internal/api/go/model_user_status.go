// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * User Service API
 *
 * API of User microservice
 *
 * API version: 0.0.1
 */

package userApi


import (
	"fmt"
)



type UserStatus string

// List of UserStatus
const (
	ACTIVE UserStatus = "active"
	INACTIVE UserStatus = "inactive"
	DELETED UserStatus = "deleted"
)

// AllowedUserStatusEnumValues is all the allowed values of UserStatus enum
var AllowedUserStatusEnumValues = []UserStatus{
	"active",
	"inactive",
	"deleted",
}

// validUserStatusEnumValue provides a map of UserStatuss for fast verification of use input
var validUserStatusEnumValues = map[UserStatus]struct{}{
	"active": {},
	"inactive": {},
	"deleted": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v UserStatus) IsValid() bool {
	_, ok := validUserStatusEnumValues[v]
	return ok
}

// NewUserStatusFromValue returns a pointer to a valid UserStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewUserStatusFromValue(v string) (UserStatus, error) {
	ev := UserStatus(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for UserStatus: valid values are %v", v, AllowedUserStatusEnumValues)
}



// AssertUserStatusRequired checks if the required fields are not zero-ed
func AssertUserStatusRequired(obj UserStatus) error {
	return nil
}

// AssertUserStatusConstraints checks if the values respects the defined constraints
func AssertUserStatusConstraints(obj UserStatus) error {
	return nil
}
