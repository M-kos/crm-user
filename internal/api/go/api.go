// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * User Service API
 *
 * API of User microservice
 *
 * API version: 0.0.1
 */

package userApi

import (
	"context"
	"net/http"
)



// AuthAPIRouter defines the required methods for binding the api requests to a responses for the AuthAPI
// The AuthAPIRouter implementation should parse necessary information from the http request,
// pass the data to a AuthAPIServicer to perform the required actions, then write the service results to the http response.
type AuthAPIRouter interface { 
	AuthLoginUser(http.ResponseWriter, *http.Request)
	AuthRefreshUser(http.ResponseWriter, *http.Request)
}
// UserAPIRouter defines the required methods for binding the api requests to a responses for the UserAPI
// The UserAPIRouter implementation should parse necessary information from the http request,
// pass the data to a UserAPIServicer to perform the required actions, then write the service results to the http response.
type UserAPIRouter interface { 
	GetAllUsers(http.ResponseWriter, *http.Request)
	CreateUser(http.ResponseWriter, *http.Request)
	GetUserById(http.ResponseWriter, *http.Request)
	UpdateUserById(http.ResponseWriter, *http.Request)
	DeleteUserById(http.ResponseWriter, *http.Request)
}


// AuthAPIServicer defines the api actions for the AuthAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type AuthAPIServicer interface { 
	AuthLoginUser(context.Context, LoginUserRequest) (ImplResponse, error)
	AuthRefreshUser(context.Context) (ImplResponse, error)
}


// UserAPIServicer defines the api actions for the UserAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type UserAPIServicer interface { 
	GetAllUsers(context.Context) (ImplResponse, error)
	CreateUser(context.Context, CreateUserRequest) (ImplResponse, error)
	GetUserById(context.Context, string) (ImplResponse, error)
	UpdateUserById(context.Context, string, UpdateUserRequest) (ImplResponse, error)
	DeleteUserById(context.Context, string) (ImplResponse, error)
}
