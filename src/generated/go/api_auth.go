// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * User Service API
 *
 * API of User microservice
 *
 * API version: 0.0.1
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"
)

// AuthAPIController binds http requests to an api service and writes the service results to the http response
type AuthAPIController struct {
	service AuthAPIServicer
	errorHandler ErrorHandler
}

// AuthAPIOption for how the controller is set up.
type AuthAPIOption func(*AuthAPIController)

// WithAuthAPIErrorHandler inject ErrorHandler into controller
func WithAuthAPIErrorHandler(h ErrorHandler) AuthAPIOption {
	return func(c *AuthAPIController) {
		c.errorHandler = h
	}
}

// NewAuthAPIController creates a default api controller
func NewAuthAPIController(s AuthAPIServicer, opts ...AuthAPIOption) *AuthAPIController {
	controller := &AuthAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the AuthAPIController
func (c *AuthAPIController) Routes() Routes {
	return Routes{
		"AuthLoginUser": Route{
			strings.ToUpper("Post"),
			"/auth/login",
			c.AuthLoginUser,
		},
		"AuthRefreshUser": Route{
			strings.ToUpper("Post"),
			"/auth/refresh",
			c.AuthRefreshUser,
		},
	}
}

// AuthLoginUser - Login user into the system
func (c *AuthAPIController) AuthLoginUser(w http.ResponseWriter, r *http.Request) {
	var loginUserRequestParam LoginUserRequest
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&loginUserRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertLoginUserRequestRequired(loginUserRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertLoginUserRequestConstraints(loginUserRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.AuthLoginUser(r.Context(), loginUserRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// AuthRefreshUser - Refresh user token
func (c *AuthAPIController) AuthRefreshUser(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.AuthRefreshUser(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
